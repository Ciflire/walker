name: Build and Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04-arm
            arch: arm64
            binary: walker-arm64
          - os: ubuntu-24.04
            arch: amd64
            binary: walker-amd64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-4-dev \
            libgirepository1.0-dev \
            gobject-introspection \
            libwayland-dev \
            meson \
            ninja-build \
            gtk-doc-tools \
            python3 \
            valac \
            libvips-dev \
            pkg-config \
            gcc

      - name: Build gtk4-layer-shell
        run: |
          cd /tmp
          git clone https://github.com/wmww/gtk4-layer-shell
          cd gtk4-layer-shell
          meson setup -Dexamples=false -Ddocs=false -Dtests=false build
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig

      - name: Build binary
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -tags=nosse -o ${{ matrix.binary }} ./cmd
          else
            CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ${{ matrix.binary }} ./cmd
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: ${{ matrix.binary }}

  release:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: walker-arm64
          path: .

      - name: Download AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: walker-amd64
          path: .

      - name: Create archives
        run: |
          # Create directories (ARM64 first as requested)
          mkdir -p dist/walker_${{ steps.version.outputs.VERSION }}_Linux_arm64
          mkdir -p dist/walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64

          # Copy ARM64 files FIRST
          cp walker-arm64 dist/walker_${{ steps.version.outputs.VERSION }}_Linux_arm64/walker
          cp LICENSE dist/walker_${{ steps.version.outputs.VERSION }}_Linux_arm64/
          cp internal/config/config.default.toml dist/walker_${{ steps.version.outputs.VERSION }}_Linux_arm64/
          cp -r internal/config/themes dist/walker_${{ steps.version.outputs.VERSION }}_Linux_arm64/

          # Copy AMD64 files
          cp walker-amd64 dist/walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64/walker
          cp LICENSE dist/walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64/
          cp internal/config/config.default.toml dist/walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64/
          cp -r internal/config/themes dist/walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64/

          # Create tarballs
          cd dist
          tar -czf walker_${{ steps.version.outputs.VERSION }}_Linux_arm64.tar.gz walker_${{ steps.version.outputs.VERSION }}_Linux_arm64/
          tar -czf walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64.tar.gz walker_${{ steps.version.outputs.VERSION }}_Linux_x86_64/

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            sed -n "/^## \[${{ steps.version.outputs.VERSION }}\]/,/^## \[/p" CHANGELOG.md | sed '$d' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Release ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
